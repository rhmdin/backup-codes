# -*- coding: utf-8 -*-
"""Capstone_2class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sqoEJh51K5ad4TKzpUwkbVY17M3eCP1r
"""

! gdown --id 15rT9a51loB3KK2BKgtmPxVtmAubZnVbQ

import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt

"""EXTRACT ZIP"""

#extract zip

import zipfile

local_zip = '/content/dataset_2class.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall()

zip_ref.close()

import os

base_dir = '/content/dataset_2class'

print("Contents of base directory:")
print(os.listdir(base_dir))

print("\nContents of train directory:")
print(os.listdir(f'{base_dir}/train'))

print("\nContents of validation directory:")
print(os.listdir(f'{base_dir}/valid'))

import os

train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'valid')
test_dir = os.path.join(base_dir, 'test')

# Directory with training pictures
train_nuklear_dir = os.path.join(train_dir, 'nuklear')
train_healty_dir = os.path.join(train_dir, 'healthy')

# Directory with validation pictures
validation_nuklear_dir = os.path.join(validation_dir, 'nuklear')
validation_healty_dir = os.path.join(validation_dir, 'healthy')

# Directory with testing pictures
test_nuklear_dir = os.path.join(test_dir, 'nuklear')
test_healty_dir = os.path.join(test_dir, 'healthy')

#lihat isi
train_nuklear_fnames = os.listdir( train_nuklear_dir )
train_healty_fnames = os.listdir(train_healty_dir)



print(train_nuklear_fnames[:10])
print(train_healty_fnames[:10])

#lihat jumlah data masing-masing file

print('total training nuklear images :', len(os.listdir(      train_nuklear_dir ) ))
print('total training Healty eye images :', len(os.listdir(      train_healty_dir ) ))

print('total validation nuklear images :', len(os.listdir(      validation_nuklear_dir ) ))
print('total validation Healty eye images :', len(os.listdir(      validation_healty_dir ) ))

print('total test nuklear images :', len(os.listdir(      test_nuklear_dir ) ))
print('total test Healty eye images :', len(os.listdir(      test_healty_dir ) ))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.image as mpimg
import matplotlib.pyplot as plt

nrows = 4
ncols = 4

pic_index = 0 # Index for iterating over images

"""Untuk lihat gambar nuklear sklerosis dan ringworm"""

fig = plt.gcf()
fig.set_size_inches(ncols*4, nrows*4)

pic_index+=8

next_nuklear_pix = [os.path.join(train_nuklear_dir, fname)
                for fname in train_nuklear_fnames[ pic_index-8:pic_index]
               ]

next_healty_pix = [os.path.join(train_healty_dir, fname)
                for fname in train_healty_fnames[ pic_index-8:pic_index]
               ]

for i, img_path in enumerate(next_nuklear_pix+next_healty_pix):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off')

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

model = tf.keras.models.Sequential([
    # Note the input shape is the desired size of the image 150x150 with 3 bytes color
    tf.keras.layers.Conv2D(128, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(300, activation='relu'),
    tf.keras.layers.Dense(150, activation='relu'),
    tf.keras.layers.Dense(50, activation='relu'),
    tf.keras.layers.Dense(2, activation='sigmoid')
])

model.summary()

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.0001),
              loss='binary_crossentropy',
              metrics = ['accuracy'])
#(learning_rate=0.0001),

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255.
train_datagen = ImageDataGenerator(
                                   rescale=1./255,
                                   rotation_range=30,
                                   width_shift_range=0.3,
                                   height_shift_range=0.3,
                                   zoom_range=0.3,
                                   horizontal_flip=True)
test_datagen  = ImageDataGenerator( rescale = 1.0/255.,
                                   rotation_range=30,
                                   width_shift_range=0.3,
                                   height_shift_range=0.3,
                                   zoom_range=0.3,
                                   horizontal_flip=True)

# --------------------
# Flow training images in batches of 20 using train_datagen generator
# --------------------
train_generator = train_datagen.flow_from_directory(train_dir,
                                                    batch_size=25,
                                                    class_mode='categorical',
                                                    target_size=(150, 150))
# --------------------
# Flow validation images in batches of 20 using test_datagen generator
# --------------------
validation_generator =  test_datagen.flow_from_directory(validation_dir,
                                                         batch_size=25,
                                                         class_mode  = 'categorical',
                                                         target_size = (150, 150))

test_generator =  test_datagen.flow_from_directory(test_dir,
                                                         batch_size=25,
                                                         class_mode  = 'categorical',
                                                         target_size = (150, 150))

callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
history = model.fit(
            train_generator,
            epochs=40,
            steps_per_epoch=20,
            validation_data=validation_generator,
            validation_steps=10,
            callbacks=[callback],
            verbose=1
            )
test_data = model.evaluate(test_generator)

#print(test_data)
print('Test loss:', test_data[0])
print('Test accuracy:', test_data[1])

import numpy as np
from google.colab import files
from tensorflow.keras.utils import load_img, img_to_array
from PIL import Image

# Fungsi untuk melakukan prediksi
def predict(image):
    image = image.resize((150, 150))  # Menyesuaikan ukuran gambar jika diperlukan
    image_array = np.array(image) / 255.0  # Mengonversi gambar menjadi array dan normalisasi
    image_array = np.expand_dims(image_array, axis=0)  # Menambahkan dimensi batch
    probabilities = model.predict(image_array)[0]
    class_idx = np.argmax(probabilities)

    return {class_labels[class_idx]: probabilities[class_idx]}

# Memuat gambar dari komputer
uploaded = files.upload()
image_paths = list(uploaded.keys())

class_labels = ['healthy','nuklear']

for image_path in image_paths:
    # Membaca gambar
    image = Image.open(image_path)

    # Melakukan prediksi
    prediction = predict(image)

    # Menampilkan hasil prediksi
    class_name = list(prediction.keys())[0]
    confidence = list(prediction.values())[0]
    print("Prediksi untuk %s: class: %s, confidence: %.2f%%" % (image_path, class_name, confidence * 100))

import numpy as np
import random
from tensorflow.keras.utils import img_to_array, load_img

# Define a new Model that will take an image as input, and will output
# intermediate representations for all layers in the previous model
successive_outputs = [layer.output for layer in model.layers]
visualization_model = tf.keras.models.Model(inputs = model.input, outputs = successive_outputs)

# Prepare a random input image from the training set.
nuklear_img_files = [os.path.join(train_nuklear_dir, f) for f in train_nuklear_fnames]
healthy_img_files = [os.path.join(train_healty_dir, f) for f in train_healty_fnames]

img_path = random.choice(nuklear_img_files + healthy_img_files )
img = load_img(img_path, target_size=(150, 150))  # this is a PIL image
x   = img_to_array(img)                           # Numpy array with shape (150, 150, 3)
x   = x.reshape((1,) + x.shape)                   # Numpy array with shape (1, 150, 150, 3)

# Scale by 1/255
x /= 255.0

# Run the image through the network, thus obtaining all
# intermediate representations for this image.
successive_feature_maps = visualization_model.predict(x)

# These are the names of the layers, so you can have them as part of our plot
layer_names = [layer.name for layer in model.layers]

# Display the representations
for layer_name, feature_map in zip(layer_names, successive_feature_maps):

  if len(feature_map.shape) == 4:

    #-------------------------------------------
    # Just do this for the conv / maxpool layers, not the fully-connected layers
    #-------------------------------------------
    n_features = feature_map.shape[-1]  # number of features in the feature map
    size       = feature_map.shape[ 1]  # feature map shape (1, size, size, n_features)

    # Tile the images in this matrix
    display_grid = np.zeros((size, size * n_features))

    #-------------------------------------------------
    # Postprocess the feature to be visually palatable
    #-------------------------------------------------
    for i in range(n_features):
      x  = feature_map[0, :, :, i]
      x -= x.mean()
      x /= x.std ()
      x *=  64
      x += 128
      x  = np.clip(x, 0, 255).astype('uint8')
      display_grid[:, i * size : (i + 1) * size] = x # Tile each filter into a horizontal grid

    #-----------------
    # Display the grid
    #-----------------
    scale = 25. / n_features
    plt.figure( figsize=(scale * n_features, scale) )
    plt.title ( layer_name )
    plt.grid  ( False )
    plt.imshow( display_grid, aspect='auto', cmap='viridis' )



#-----------------------------------------------------------
# Retrieve a list of list results on training and test data
# sets for each training epoch
#-----------------------------------------------------------
acc      = history.history[     'accuracy' ]
val_acc  = history.history[ 'val_accuracy' ]
loss     = history.history[    'loss' ]
val_loss = history.history['val_loss' ]

epochs   = range(len(acc)) # Get number of epochs

#------------------------------------------------
# Plot training and validation accuracy per epoch
#------------------------------------------------
plt.plot  ( epochs,     acc )
plt.plot  ( epochs, val_acc )
plt.title ('Training and validation accuracy')
plt.figure()

#------------------------------------------------
# Plot training and validation loss per epoch
#------------------------------------------------
plt.plot  ( epochs,     loss )
plt.plot  ( epochs, val_loss )
plt.title ('Training and validation loss'   )

model.save('/content/model.h5')

model.save('/content/saved_model_file')

!zip -r /content/saved_model_file.zip /content/saved_model_file

from google.colab import files
files.download('saved_model_file.zip')